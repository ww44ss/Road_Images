colnames(t)<-c("pass","rms")
t<-cbind(rownames(t), t)
colnames(t)<-c("pass","rms")
t$pass<-as.factor(as.character(t$pass))
p<-ggplot(t, aes(x=pass))
p<-geom_point(aes(y=rms))
print(p)
p <- ggplot(t, aes(x=pass, y=rms))
p <- p + geom_bar(stat="identity", fill="lightblue", color="red")
print(p)
t
t<-skier_probs
t<-t[,2:ncol(t)]-t[,2]
t<-t*t
t<-colSums(t)
t<-as.data.frame(t)
t<-cbind(rownames(t), t)
colnames(t)<-c("pass","rms")
t$pass<-as.factor(as.character(t$pass))
p<-ggplot(t, aes(x=pass))
p<-geom_point(aes(y=rms))
print(p)
p <- ggplot(t, aes(x=pass, y=rms))
p <- p + geom_bar(stat="identity", fill="lightblue", color="red")
print(p)
t<-skier_probs
t<-t[,2:ncol(t)]-t[,2]
t<-abs(t)
t<-colSums(t)
t<-as.data.frame(t)
t<-cbind(rownames(t), t)
colnames(t)<-c("pass","rms")
t$pass<-as.factor(as.character(t$pass))
p<-ggplot(t, aes(x=pass))
p<-geom_point(aes(y=rms))
print(p)
p <- ggplot(t, aes(x=pass, y=rms))
p <- p + geom_bar(stat="identity", fill="lightblue", color="red")
print(p)
t<-skier_probs
t<-t[,2:ncol(t)]-t[,2]
t<-sqrt(t*t)
t<-colSums(t)
t<-as.data.frame(t)
t<-cbind(rownames(t), t)
colnames(t)<-c("pass","rms")
t$pass<-as.factor(as.character(t$pass))
p<-ggplot(t, aes(x=pass, y=rms))
p<-geom_point()
print(p)
p<-ggplot(t, aes(x=pass, y=rms))
p<-geom_point()
print(p)
p<-ggplot(t, aes(x=pass, y=rms))
p<-p+geom_point()
print(p)
p<-ggplot(t, aes(x=pass, y=rms))
p<-p+geom_point(color="#33EF66", size=4)
print(p)
p<-ggplot(t, aes(x=pass, y=rms))
p<-p+geom_point(color="#3322D6", size=7)
print(p)
p <- ggplot(t, aes(x=pass, y=rms))
t<-skier_probs
t
t<-t[,2:ncol(t)]-t[,2]
t
t<-colSums(t)
tt<-as.data.frame(t)
t
t<-cbind(rownames(t), t)
t
t$pass<-as.factor(as.character(t$pass))
t<-skier_probs
t<-t[,2:ncol(t)]-t[,2]
t<-sqrt(t*t)
t<-colSums(t)
g
t
skier_probs
x=c(rep(1:10,4))
dim(x)=c(10,4)
x=data.frame(x)
x2=x[order(-1:-10),]
x2
skier_probs_melted<-melt(skier_probs, variable.name="pass")
head(skier_probs_melted)
t
big_skier_record<-NULL
pass_sample<-sample(valid_pass, 40)
## initialize some factors
skier_probs<-NULL
chair_list<-rownames(look_up)
chair_list<-gsub(" ", "_", chair_list)
skier_probs<-as.data.frame(chair_list)
for (pass in pass_sample) {
## read in the pass data
#pass<-pass_sample[2]   ## for debug
#pass<-pass_sample[4]
ski_runs<-NULL
ski_runs<-read.csv(paste0(Directory, pass))
##fix Pine_Marten
ski_runs$chair<-gsub(" ", "_", ski_runs$chair)
## suppress pass_id column
ski_runs$pass_id<-NULL
## hash the pass identity
pass_s<-digest(pass, algo="xxhash32")
ski_runs$pass<-pass_s
prob<-chair_probs(ski_runs$chair, chair_list)
colnames(prob)<-pass_s
##handle exception on first pass
if (!is.null(skier_probs)) {skier_probs <- cbind(skier_probs, prob)} else {skier_probs<-prob}
}
## finally melt the
skier_probs_melted<-melt(skier_probs, variable.name="pass")
pass_count<-ncol(skier_probs)
# skier probs looks like this
#              chair_list   cef2cd00    4e6b546f    75627e6a
# Sunrise         Sunrise 0.20666959 0.156342183 0.082519965
# Rainbow         Rainbow 0.12242211 0.026548673 0.025732032
# Skyliner       Skyliner 0.17683194 0.185840708 0.378881988
# Summit           Summit 0.04695042 0.020648968 0.066548358
# Sunshine       Sunshine 0.01974550 0.274336283 0.013309672
# Pine_Marten Pine_Marten 0.29179465 0.268436578 0.338065661
# Red                 Red 0.00833699 0.002949853 0.002661934
# Outback         Outback 0.05484862 0.026548673 0.031055901
# Northwest     Northwest 0.07240018 0.038348083 0.061224490
t<-skier_probs
t<-t[,2:ncol(t)]-t[,2]
t<-sqrt(t*t)
t<-colSums(t)
# data now looks like this
#  cef2cd00  4e6b546f  75627e6a
# 0.0000000 0.5271991 0.5358380
t<-as.data.frame(t)
t<-cbind(rownames(t), t)
colnames(t)<-c("pass","rms")
t$pass<-as.factor(as.character(t$pass))
rms_delta<-t
rms_delta
set.seed(8675309)
holidays_season = holidayNYSE(2005:2015)
chair_probs<-NULL
## Function Chair Probs
## Passes a chair list and a ride list.
## Counts the number of elements in the ride list corresponding to the chair list.
chair_probs <- function(ride_list, chair_list){
rides <- factor(ride_list, levels= chair_list)
rides<-as.data.frame.table(table(rides))
total_rides<-sum(rides$Freq)
z<-as.data.frame((rides$Freq+0.5)/(total_rides+0.5*length(chair_list)))
rownames(z)<-rides$rides
return(z)
}
big_skier_record<-NULL
pass_sample<-sample(valid_pass, 40)
## initialize some factors
skier_probs<-NULL
chair_list<-rownames(look_up)
chair_list<-gsub(" ", "_", chair_list)
skier_probs<-as.data.frame(chair_list)
for (pass in pass_sample) {
## read in the pass data
#pass<-pass_sample[2]   ## for debug
#pass<-pass_sample[4]
ski_runs<-NULL
ski_runs<-read.csv(paste0(Directory, pass))
##fix Pine_Marten
ski_runs$chair<-gsub(" ", "_", ski_runs$chair)
## suppress pass_id column
ski_runs$pass_id<-NULL
## hash the pass identity
pass_s<-digest(pass, algo="xxhash32")
ski_runs$pass<-pass_s
prob<-chair_probs(ski_runs$chair, chair_list)
colnames(prob)<-pass_s
##handle exception on first pass
if (!is.null(skier_probs)) {skier_probs <- cbind(skier_probs, prob)} else {skier_probs<-prob}
}
## finally melt the
skier_probs_melted<-melt(skier_probs, variable.name="pass")
```
pass_count<-ncol(skier_probs)
t<-skier_probs
t<-t[,2:ncol(t)]-t[,2]
t<-sqrt(t*t)
t<-colSums(t)
# data now looks like this
#  cef2cd00  4e6b546f  75627e6a
# 0.0000000 0.5271991 0.5358380
t<-as.data.frame(t)
t<-cbind(rownames(t), t)
colnames(t)<-c("pass","rms")
t$pass<-as.factor(as.character(t$pass))
rms_delta<-t
rms_delta
skier_probs
set.seed(8675309+3)
## just get one pass
pass_sample<-sample(valid_pass, 1)
##calculate reference for rms
skier_probs<-NULL
chair_list<-rownames(look_up)
chair_list<-gsub(" ", "_", chair_list)
skier_probs<-as.data.frame(chair_list)
##get overall skier probs
for (pass in pass_sample) {
## read in the pass data
ski_runs<-NULL
ski_runs<-read.csv(paste0(Directory, pass))
##fix Pine_Marten
ski_runs$chair<-gsub(" ", "_", ski_runs$chair)
## suppress pass_id column
ski_runs$pass_id<-NULL
## hash the pass identity
pass_s<-digest(pass, algo="xxhash32")
ski_runs$pass<-pass_s
prob<-chair_probs(ski_runs$chair, chair_list)
colnames(prob)<-pass_s
##handle exception on first pass
if (!is.null(skier_probs)) {skier_probs <- cbind(skier_probs, prob)} else {skier_probs<-prob}
}
ski_runs
dates_list<-unique(ski_runs$date)
dates_list
i_date<-dates_list[1]
day_runs<-ski_runs[ski_runs$date==idate,]
day_runs<-ski_runs[ski_runs$date==i_date,]
day_runs
day_probs<-NULL
for (i_date in dates_list){
#i_date<-dates_list[1]
day_runs<-ski_runs[ski_runs$date==i_date,]
prob<-chair_probs(day_runs$chair, chair_list)
colnames(prob)<-pass_s
##handle exception on first pass
if (!is.null(day_probs)) {day_probs <- cbind(day_probs, prob)} else {day_probs<-prob}
}
day_probs
for (i_date in dates_list){
day_probs<-NULL
for (i_date in dates_list){
#i_date<-dates_list[1]
day_runs<-ski_runs[ski_runs$date==i_date,]
prob<-chair_probs(day_runs$chair, chair_list)
colnames(prob)<-i_date
##handle exception on first pass
if (!is.null(day_probs)) {day_probs <- cbind(day_probs, prob)} else {day_probs<-prob}
}
day_probs<-NULL
for (i_date in dates_list){
#i_date<-dates_list[1]
day_runs<-ski_runs[ski_runs$date==i_date,]
prob<-chair_probs(day_runs$chair, chair_list)
colnames(prob)<-i_date
##handle exception on first pass
if (!is.null(day_probs)) {day_probs <- cbind(day_probs, prob)} else {day_probs<-prob}
}
day_probs
skier_probs
skier_probs[,2]
set.seed(8675309+3)
## just get one pass
pass_sample<-sample(valid_pass, 1)
##calculate reference for rms
skier_probs<-NULL
chair_list<-rownames(look_up)
chair_list<-gsub(" ", "_", chair_list)
skier_probs<-as.data.frame(chair_list)
##get overall skier probs
pass<-sample_pass
## read in the pass data
ski_runs<-NULL
ski_runs<-read.csv(paste0(Directory, pass))
##fix Pine_Marten
ski_runs$chair<-gsub(" ", "_", ski_runs$chair)
pass_sample<-sample(valid_pass, 1)
pass_sample
skier_probs<-NULL
chair_list<-rownames(look_up)
chair_list<-gsub(" ", "_", chair_list)
skier_probs<-as.data.frame(chair_list)
##get overall skier probs
pass<-sample_pass
head(valid_pass)
pass<-pass_sample
## read in the pass data
ski_runs<-NULL
ski_runs<-read.csv(paste0(Directory, pass))
##fix Pine_Marten
ski_runs$chair<-gsub(" ", "_", ski_runs$chair)
## suppress pass_id column
ski_runs$pass_id<-NULL
## hash the pass identity
pass_s<-digest(pass, algo="xxhash32")
ski_runs$pass<-pass_s
prob<-chair_probs(ski_runs$chair, chair_list)
colnames(prob)<-pass_s
##handle exception on first pass
if (!is.null(skier_probs)) {skier_probs <- cbind(skier_probs, prob)} else {skier_probs<-prob}
skier_probs
dates_list<-unique(ski_runs$date)
day_probs<-NULL
for (i_date in dates_list){
#i_date<-dates_list[1]
day_runs<-ski_runs[ski_runs$date==i_date,]
prob<-chair_probs(day_runs$chair, chair_list)
colnames(prob)<-i_date
##handle exception on first pass
if (!is.null(day_probs)) {day_probs <- cbind(day_probs, prob)} else {day_probs<-prob}
}
day_probs
t<-day_probs
t<-t[,1:ncol(t)]-skier_probs[,2]
t<-sqrt(t*t)
t<-colSums(t)
t
head(t)
plot(t)
plot(t)
head(day_probs)
str(day_probs)
colnames(day_runs)
colnames(day_probs)
rownames(day_probs)
a<-ddply(day_probs)
a<-ddply(day_probs, rownames(day_probs))
a<-ddply(day_probs, colnames(day_probs))
head(a)
a[1]
q[2]
a[2]
day_probs$name<rownames(day_probs)
head(day_probs)
dim(day_probs)
day_runs[,1]
rownames(day_probs)
a<-day_probs
a$names<rownnames(a)
a$names<rownames(a)
a$names<-rownames(a)
b<-melt(a, id="names")
head(b)
day_probs$chair<-rownames(day_probs)
b<-melt(day_probs, id="chair")
colnames(b)
colnames(b)<-c("chair", "date", "prob")
head(b)
dim(t)
dates_list<-unique(ski_runs$date)
day_probs<-NULL
for (i_date in dates_list){
#i_date<-dates_list[1]
day_runs<-ski_runs[ski_runs$date==i_date,]
prob<-chair_probs(day_runs$chair, chair_list)
colnames(prob)<-i_date
##handle exception on first pass
if (!is.null(day_probs)) {day_probs <- cbind(day_probs, prob)} else {day_probs<-prob}
}
dim(t)
length(t)
t[1:5]
melt(tu<-)
u<-melt(t)
dim(u)
head(u)
u<-melt(t)
u$date<-rownames(u)
head(u)
day_probs$date==u$date
dim(day_probs)
dim(u)
dim(b)
colnames(b)
unique(b$date)
length(unique(b$date))
unique(b$date)==u$date
table( unique(b$date)==u$date)
head(u)
sample(valid_pass, 1)
dim(t)
length(t)
t[1:5]
t<-day_probs
length(t)
t[1:3]
t<-t[,1:ncol(t)]-skier_probs[,2]
t[1:3]
t<-sqrt(t*t)
t[1:3]
?colmax
colMax <- function(data) sapply(data, max, na.rm = TRUE)
d<-colMax(t)
d[1:4]
u<-melt(t)
z<-colSums(t)
z[1:3]
u<-melt(t)
head(u)
t<-day_probs
t<-t[,1:ncol(t)]-skier_probs[,2]
t<-sqrt(t*t)
colMax <- function(data) sapply(data, max, na.rm = TRUE)
y<-colMax(t)
v<-melt(y)
head(v)
q<- ggplot(v, aes(x=date, y = value))
a<-readLines("http://tripcheck.com/RoadCams/cams/Santiam%20Pass_pid2728.JPG?rand=567")
a
download.file("http://tripcheck.com/RoadCams/cams/Santiam%20Pass_pid2728.JPG?rand=567", image_test.jpg)
b<-download.file("http://tripcheck.com/RoadCams/cams/", "Santiam%20Pass_pid2728.JPG")
b<-download.file("http://tripcheck.com/RoadCams/cams/", "Santiam%20Pass_pid2728.JPG?rand=567")
?read.jpeg
??read.jpeg
# Next, we download packages that H2O depends on.
if (! ("methods" %in% rownames(installed.packages()))) { install.packages("methods") }
if (! ("statmod" %in% rownames(installed.packages()))) { install.packages("statmod") }
if (! ("stats" %in% rownames(installed.packages()))) { install.packages("stats") }
if (! ("graphics" %in% rownames(installed.packages()))) { install.packages("graphics") }
if (! ("RCurl" %in% rownames(installed.packages()))) { install.packages("RCurl") }
if (! ("rjson" %in% rownames(installed.packages()))) { install.packages("rjson") }
if (! ("tools" %in% rownames(installed.packages()))) { install.packages("tools") }
if (! ("utils" %in% rownames(installed.packages()))) { install.packages("utils") }
# Now we download, install and initialize the H2O package for R.
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-simons/7/R")))
library(h2o)
localH2O <- h2o.init(nthreads = -1)  #Start up H2O cluster using nthreads = ncores
# Get training data:
data <- h2o.importFile("http://www.stat.berkeley.edu/~ledell/data/wisc-diag-breast-cancer-shuffled.csv",
destination_frame = "breast_cancer")
y <- "diagnosis"  #Response column
x <- setdiff(names(data), c(y, "id"))  #remove 'id' and response col
head(data)
names(data)
dim(data)
str(data)
set.seed(1)
ss <- h2o.splitFrame(data)  #split data into train & test partitions
str(ss)
dim(ss)
length(ss)
ss
head(ss)
data <- h2o.importFile("http://tripcheck.com/RoadCams/cams/Santiam%20Pass_pid2728.JPG?rand=567",
destination_frame = "testt")
testt<-NULL
data <- h2o.importFile("http://tripcheck.com/RoadCams/cams/Santiam%20Pass_pid2728.JPG?rand=567",
destination_frame = "testt")
?h2o.importFile
data <- h2o.upload("http://tripcheck.com/RoadCams/cams/Santiam%20Pass_pid2728.JPG?rand=567",
destination_frame = "testt")
data <- h2o.uploadFile("http://tripcheck.com/RoadCams/cams/Santiam%20Pass_pid2728.JPG?rand=567",
destination_frame = "testt")
b<-download.file("http://tripcheck.com/RoadCams/cams/Santiam%20Pass_pid2728.JPG?rand=567", mode = 'wb')
?download.file
b<-download.file("http://tripcheck.com/RoadCams/cams/Santiam%20Pass_pid2728.JPG?rand=567", destfile="testt.jpg",mode = 'wb')
b
Sys.time()
Sys.time()+1
b<-Sys.time()
b
b+200
b+1
Sys.sleep(1.0)
60*30/100
dir
getwd()
setwd(~/Road_Images)
getwd()
setwd(~Road_Images)
?setwd()
setwd(Road_Images)
?~
setwd("~/Road_Images")
setwd(~/Road_Images)
setwd(~\Road_Images)
setwd(~/Road_Images/)
setwd(paste0(getwd(), "/Road_Images")
)
getwd
getwd()
setwd("/Users/winstonsaunders/Documents/")
setwd(paste0(getwd(), "/Road_Images"))
image_save_dir<-paste0(getwd(), "\Image_Data")
day_record<-3
for (i in 1:day_record*24*2){
Sys.sleep(60*30/100)
cat("Read: ",Sys.time(), "\n")
## download file
download.file("http://tripcheck.com/RoadCams/cams/Santiam%20Pass_pid2728.JPG?rand=567",
destfile=paste0(image_save_dir,Sys.time(), "santiam.jpg"),mode = 'wb')
}
cat("End:  ",Sys.time(), "\n")
image_save_dir<-paste0(getwd(), "\Image_Data")
setwd("/Users/winstonsaunders/Documents/")
setwd(paste0(getwd(), "/Road_Images"))
image_save_dir<-paste0(getwd(), "/Image_Data")
day_record<-3
for (i in 1:day_record*24*2){
Sys.sleep(60*30/100)
cat("Read: ",Sys.time(), "\n")
## download file
download.file("http://tripcheck.com/RoadCams/cams/Santiam%20Pass_pid2728.JPG?rand=567",
destfile=paste0(image_save_dir,Sys.time(), "santiam.jpg"),mode = 'wb')
}
cat("End:  ",Sys.time(), "\n")
cat("Read: ", as.POSIXlt(Sys.time()), "\n")
as.POSIXlt(Sys.time())
source('~/Documents/Road_Images/Image_Grabber.R')
source('~/Documents/Road_Images/Image_Grabber.R')
install.packages("imager")
library(ripa)
